//REDUX________________________________________________________
const ADDTEXT = 'ADDTEXT';

//redux action creator_____________________________________________
const addingInput = (markdown) => {
  return {
   type: ADDTEXT,
   markdown: markdown
  };
};
//--------------------------------------------------------------------

//redux reducer function_____________________________________________
const reducer = (state = {markdown: placeholder}, action) => {
  switch(action.type){
    case ADDTEXT : return {markdown: action.markdown};
    default: return state;
  };
};
//----------------------------------------------------------------


//declaring redux store___________________________________________
const store = Redux.createStore(reducer);
//------------------------------------------------




//REACT----------------------------------------------------------

// enabling breaks on pressing enter-------------
marked.setOptions({
  breaks: true,
});


// dark color scheme object for dark theme ---------------------
 const darkScheme = {
  '--body' : 'black',
   '--font': 'white',
  '--back': 'linear-gradient(to right top, #0e04d1, #c90097, #fb0059, #ff5d27, #eba612)',
   '--toolbar' : '#2d2d2d',
  '--textArea': '#212121',
  '--textFont': '#f2f2f2',
   '--tableColor': '#262626'
};



// light color scheme object for light theme ---------------------

 const lightScheme = {
  '--body' : '#e6e6e6',
   '--font': 'black',
  '--back': 'linear-gradient(to left bottom, #0b0dc7, #bc007a, #d60032, #c06000, #989514)',
   '--toolbar': '#fdfdfd',
  '--textArea': 'white',
  '--textFont': '#0d0d0d',
   '--tableColor': '#e6e6e6'
};


//placeholder String for Editor Component---------
const placeholder = 
`# Welcome to my React Markdown Previewer!

// To find what this can do, view our sample text below or start editing in the editor and see the results rendered in the previewer.

## For more information, click on the info icon at the top right corner of the screen
### Here's the sample to show you some cool stuff:
  
Heres some code, \`<div></div>\`, between 2 backticks.

\`\`\`
// this is multi-line code:

function anotherExample(firstLine, lastLine) {
  if (firstLine == '\`\`\`' && lastLine == '\`\`\`') {
    return multiLineCode;
  }
}
\`\`\`
  
You can also make text **bold**... whoa!
Or _italic_.
Or... wait for it... **_both!_**
And feel free to go crazy ~~crossing stuff out~~.

There's also [links](https://www.freecodecamp.com), and
> Block Quotes!

And if you want to get really crazy, even tables:

Wild Header | Crazy Header | Another Header?
------------ | ------------- | ------------- 
Your content can | be here, and it | can be here....
And here. | Okay. | I think we get it.

- And of course there are lists.
  - Some are bulleted.
     - With different indentation levels.
        - That look like this.


1. And there are numbererd lists too.
1. Use just 1s if you want! 
1. But the list goes on...
- Even if you use dashes or asterisks.
* And last but not least, let's not forget embedded images:

![React Logo w/ Text](https://goo.gl/Umyytc)
`

//info string--------------------
const info = `
 # HI!
 ## You just found a Markdown Previewer

Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML).
 
To see what this can do, 
Start writing plain text in the editor or load our sample text by clicking on the back icon at the top right corner of the screen and quickly see the text rendered in the Markdown Previewer.

Here is a tip--
♥ You can switch the theme using the toggle button at the top right corner of the screen ♥


Remember the editor does not save the text you enter.
`;


//Background component ---------------
//render editor and previewer----

class Background extends React.Component {
 
  constructor(props){
    super(props);
    this.state = {
      markdown: placeholder
    };
    this.props.markdown= this.state.markdown;
    this.handleChange = this.handleChange.bind(this);
    this.switch = this.switch.bind(this);
    this.toggleInfo = this.toggleInfo.bind(this);
    theme = 'dark';
  }
  
  //handle change of input in editor--------------
  handleChange(e){
    this.props.addText(e.target.value);
  }
  
  //toggle info --------------
  toggleInfo() {
    if(this.props.markdown != info){
       this.props.addText(info);
    }
    else this.props.addText(placeholder);
    
    $("#info").toggleClass("fa-info-circle");
    $("#info").toggleClass("fa-arrow-left");
  }
  
  //handle switch for theme change ------------------
  switch(){
    if(theme == 'dark') {
      for(let obj in lightScheme){
         document.documentElement.style.setProperty(obj, lightScheme[obj]);
       }
      theme = 'light';
    } else {
         for(let obj in darkScheme){
            document.documentElement.style.setProperty(obj, darkScheme[obj]);
          }
         theme = 'dark';
    }
    //toggle icon for on and off -------------------------------
    $("#theme-switch").toggleClass("fa-toggle-on");
    $("#theme-switch").toggleClass("fa-toggle-off");
  }
  
  
  render() {
    return (
       <div class="back">
          <i id="info" onClick={this.toggleInfo} class="fa fa-info-circle" aria-hidden="true"></i>
         <i id="theme-switch" onClick={this.switch} class="fa fa-toggle-on" aria-hidden="true"></i>
        <div class="parent">
         <Editor markdown={this.props.markdown} onChange={this.handleChange}/>
         <Preview markdown={this.props.markdown}/>
        </div>
       </div>
    );
  }
};



//mapping state and props to Redux to manage state-------
const mapStateToProps = (state)  => {
  return {
    markdown : state.markdown,
  };
};

const mapDispatchToProps = (dispatch) => {
  return {
    addText : function(markdown) {
        dispatch(addingInput(markdown));
    }
  };
};


// Editor Component --------------------------------
class Editor extends React.Component {
  render() {
    return (
        <div class="editor">
           <Toolbar id="edit-tool" text='Editor'/>
            <textarea onChange={this.props.onChange} value={this.props.markdown} type="text"/>
        </div>
    );
  }
}


//renderer for markdown--------
const renderer = new marked.Renderer;


//Preview Component ------------------------------
class Preview extends React.Component {
 
  render() {
    return (
        <div class="preview">
            <Toolbar id="preview-tool" text='Previewer'/>
            <div id="view" dangerouslySetInnerHTML={{__html: marked(
            this.props.markdown, { renderer: renderer })}} />
       </div>
    );
  }
}


//Toolbar Component--------------------------------
class Toolbar extends React.Component {
  
  render() {
    return (
       <div class="toolbar">
          <h3>{this.props.text}</h3>
       </div>
    );
  }
}


//Create a redux react connected component---------------
const connect = ReactRedux.connect;

const Container = connect(mapStateToProps, mapDispatchToProps)(Background);

const Provider = ReactRedux.Provider;

//wrapping app to work with redux---------------
class AppWrapper extends React.Component {
  render () {
     return (
      <Provider store={store}>
        <Container />
       </Provider>
     );
  }
}

//Render the app----------

ReactDOM.render(<AppWrapper />, document.getElementById('app'));


//animations and trnasitions using jquery--------------------------

 
//toggle blink animation ----------------------------------------
document.getElementById('theme-switch').onclick = function() {
  $(".back").addClass('blinks');
  setTimeout(function() {
    $(".back").removeClass('blinks');
  }, 2000);
}